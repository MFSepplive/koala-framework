'use strict';
const fs = require('fs');
const webpack = require('webpack');
const Config = require('webpack-config').Config;
const CommonsChunkPlugin = require("webpack/lib/optimize/CommonsChunkPlugin");

const TrlHtmlWebpackPlugin = require('../trl/trl-html-webpack-plugin');
const fetchLanguages = require("../loader/fetch-languages");
const fetchKwfConfig = require("./fetch-kwf-config");

const kwfConfig = fetchKwfConfig();

const componentAssets = JSON.parse(fs.readFileSync(process.cwd()+'/temp/component-assets-build/assets.json'));
let entry = {
    Admin: [
        require.resolve('../loader/ini-loader')+'?dep=Frontend!',
        require.resolve('../loader/ini-loader')+'?dep=AdminMain!',
    ],
};
Object.keys(componentAssets).forEach(pkg => {
    if (pkg == 'Frontend') {
        entry.Frontend = [
            'webpack-dev-server/client?http://'+kwfConfig['webpack-dev-server-host']+':'+kwfConfig['webpack-dev-server-port'],
            require.resolve('../loader/ini-loader')+'?dep=Frontend!',
        ];
    } else {
        entry['ComponentPackage'+pkg] = [
            require.resolve('../loader-kwc/component-assets-loader')+'?defer=0&package='+pkg+'!',
        ];
    }
});


const languages = fetchLanguages();

let plugins = [
    new CommonsChunkPlugin({
        name: ["Frontend"],
        minChunks: Infinity,
    })
];

languages.forEach(language => {
    Object.keys(componentAssets).forEach(pkg => {
        if (pkg != 'Frontend') pkg = 'ComponentPackage'+pkg;
        plugins.push(new TrlHtmlWebpackPlugin({
            filename: pkg+'.'+language+'.html',
            chunks: [pkg],
            templateContent: '',
            inject: 'head',
            language: language
        }));
    });

    plugins.push(new TrlHtmlWebpackPlugin({
        filename: 'Admin.'+language+'.html',
        chunks: ['Frontend', 'Admin'],
        templateContent: '',
        inject: 'head',
        language: language
    }));
});


module.exports = new Config().extend(require.resolve('./webpack.kwf.config')).merge({
    entry: entry,
    plugins: plugins
});
